"""
Exportador de Apresenta√ß√µes - PowerPoint e PDF
Vers√£o: 1.0
Data: 2025-08-29
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

try:
    from pptx import Presentation
    from pptx.util import Inches, Pt
    from pptx.enum.text import PP_ALIGN
    from pptx.dml.color import RGBColor
    PPTX_AVAILABLE = True
except ImportError:
    PPTX_AVAILABLE = False

try:
    import weasyprint
    WEASYPRINT_AVAILABLE = True
except ImportError:
    WEASYPRINT_AVAILABLE = False


class PresentationExporter:
    """Exportador para gerar apresenta√ß√µes PowerPoint e PDF"""
    
    def __init__(self, reports_dir: str = "reports"):
        self.reports_dir = Path(reports_dir)
        self.export_dir = Path("exports")
        self.export_dir.mkdir(exist_ok=True)
        
    def export_to_powerpoint(self, general_report_path: str = None) -> str:
        """Exporta relat√≥rio geral para PowerPoint"""
        if not PPTX_AVAILABLE:
            raise ImportError("python-pptx n√£o est√° instalado. Execute: pip install python-pptx")
            
        if general_report_path is None:
            general_report_path = self.reports_dir / "general_analysis.md"
            
        # Carregar dados do relat√≥rio geral
        data = self._load_general_report_data(general_report_path)
        
        # Criar apresenta√ß√£o
        prs = Presentation()
        
        # Slide de t√≠tulo
        self._add_title_slide(prs, data)
        
        # Slide de resumo executivo
        self._add_executive_summary_slide(prs, data)
        
        # Slide de estat√≠sticas gerais
        self._add_statistics_slide(prs, data)
        
        # Slide de distribui√ß√£o por tipo
        self._add_project_types_slide(prs, data)
        
        # Slides de projetos cr√≠ticos
        self._add_critical_projects_slides(prs, data)
        
        # Slide de pr√≥ximos passos
        self._add_next_steps_slide(prs)
        
        # Salvar apresenta√ß√£o
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = self.export_dir / f"cnpj_analysis_presentation_{timestamp}.pptx"
        prs.save(str(output_file))
        
        return str(output_file)
        
    def export_to_pdf(self, general_report_path: str = None) -> str:
        """Exporta relat√≥rio geral para PDF"""
        if not WEASYPRINT_AVAILABLE:
            raise ImportError("weasyprint n√£o est√° instalado. Execute: pip install weasyprint")
            
        if general_report_path is None:
            general_report_path = self.reports_dir / "general_analysis.md"
            
        # Ler conte√∫do Markdown
        with open(general_report_path, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
            
        # Converter para HTML
        html_content = self._markdown_to_html(markdown_content)
        
        # Gerar PDF
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = self.export_dir / f"cnpj_analysis_report_{timestamp}.pdf"
        
        weasyprint.HTML(string=html_content).write_pdf(str(output_file))
        
        return str(output_file)
        
    def _load_general_report_data(self, report_path: Path) -> Dict[str, Any]:
        """Carrega dados do relat√≥rio geral"""
        # Procurar pelo JSON correspondente
        json_path = report_path.with_suffix('.json')
        if json_path.exists():
            with open(json_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        # Se n√£o encontrar JSON, tentar extrair dados do Markdown
        return self._extract_data_from_markdown(report_path)
        
    def _extract_data_from_markdown(self, report_path: Path) -> Dict[str, Any]:
        """Extrai dados do relat√≥rio Markdown"""
        with open(report_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        data = {
            'total_projects': 0,
            'critical_projects': 0,
            'statistics': {},
            'critical_projects_details': []
        }
        
        # Extrair informa√ß√µes b√°sicas
        lines = content.split('\n')
        for line in lines:
            if '**Total de Projetos**:' in line:
                data['total_projects'] = int(line.split(':')[1].strip())
            elif '**Projetos com Pontos Cr√≠ticos**:' in line:
                data['critical_projects'] = int(line.split(':')[1].strip())
            elif '**Total de Campos CNPJ**:' in line:
                data['statistics']['total_fields'] = int(line.split(':')[1].strip())
            elif '**Campos Cr√≠ticos**:' in line:
                data['statistics']['total_critical_fields'] = int(line.split(':')[1].strip())
            elif '**Campos de Alto Impacto**:' in line:
                data['statistics']['total_high_impact_fields'] = int(line.split(':')[1].strip())
                
        return data
        
    def _add_title_slide(self, prs: Presentation, data: Dict[str, Any]):
        """Adiciona slide de t√≠tulo"""
        slide_layout = prs.slide_layouts[0]  # Layout de t√≠tulo
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = "An√°lise CNPJ Alfanum√©rico"
        subtitle.text = f"Relat√≥rio Geral - {data.get('total_projects', 0)} Projetos Analisados"
        
        # Estilizar t√≠tulo
        title.text_frame.paragraphs[0].font.size = Pt(44)
        title.text_frame.paragraphs[0].font.bold = True
        title.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
    def _add_executive_summary_slide(self, prs: Presentation, data: Dict[str, Any]):
        """Adiciona slide de resumo executivo"""
        slide_layout = prs.slide_layouts[1]  # Layout de t√≠tulo e conte√∫do
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = "üìã Resumo Executivo"
        
        # Criar conte√∫do
        text_frame = content.text_frame
        text_frame.clear()
        
        stats = data.get('statistics', {})
        
        p = text_frame.paragraphs[0]
        p.text = f"‚Ä¢ Total de Projetos: {data.get('total_projects', 0)}"
        p.font.size = Pt(18)
        
        p = text_frame.add_paragraph()
        p.text = f"‚Ä¢ Projetos Cr√≠ticos: {data.get('critical_projects', 0)}"
        p.font.size = Pt(18)
        
        p = text_frame.add_paragraph()
        p.text = f"‚Ä¢ Total de Campos CNPJ: {stats.get('total_fields', 0):,}"
        p.font.size = Pt(18)
        
        p = text_frame.add_paragraph()
        p.text = f"‚Ä¢ Campos Cr√≠ticos: {stats.get('total_critical_fields', 0)}"
        p.font.size = Pt(18)
        p.font.color.rgb = RGBColor(220, 53, 69)  # Vermelho
        
        p = text_frame.add_paragraph()
        p.text = f"‚Ä¢ Campos de Alto Impacto: {stats.get('total_high_impact_fields', 0)}"
        p.font.size = Pt(18)
        p.font.color.rgb = RGBColor(255, 193, 7)  # Amarelo
        
    def _add_statistics_slide(self, prs: Presentation, data: Dict[str, Any]):
        """Adiciona slide de estat√≠sticas"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = "üìä Estat√≠sticas Detalhadas"
        
        text_frame = content.text_frame
        text_frame.clear()
        
        stats = data.get('statistics', {})
        project_types = stats.get('project_types', {})
        
        p = text_frame.paragraphs[0]
        p.text = "Distribui√ß√£o por Tipo de Projeto:"
        p.font.size = Pt(20)
        p.font.bold = True
        
        for project_type, type_stats in project_types.items():
            p = text_frame.add_paragraph()
            p.text = f"‚Ä¢ {project_type}: {type_stats['count']} projetos"
            p.font.size = Pt(16)
            
            if type_stats['critical_fields'] > 0:
                p.text += f" ({type_stats['critical_fields']} cr√≠ticos)"
                p.font.color.rgb = RGBColor(220, 53, 69)
                
    def _add_project_types_slide(self, prs: Presentation, data: Dict[str, Any]):
        """Adiciona slide de tipos de projeto"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = "üèóÔ∏è Tipos de Projeto Analisados"
        
        text_frame = content.text_frame
        text_frame.clear()
        
        project_types = {
            'PHP': ['php_symfony', 'php_hyperf', 'php_laravel'],
            'UI/Frontend': ['ui_react', 'ui_vue', 'ui_angular', 'ui_react_native'],
            'Backend/BFF': ['nest_bff'],
            'ETL': ['etl_pentaho', 'etl_sql', 'etl_python']
        }
        
        for category, types in project_types.items():
            p = text_frame.paragraphs[0] if len(text_frame.paragraphs) == 1 else text_frame.add_paragraph()
            p.text = f"‚Ä¢ {category}:"
            p.font.size = Pt(18)
            p.font.bold = True
            
            for project_type in types:
                p = text_frame.add_paragraph()
                p.text = f"  - {project_type}"
                p.font.size = Pt(14)
                p.level = 1
                
    def _add_critical_projects_slides(self, prs: Presentation, data: Dict[str, Any]):
        """Adiciona slides de projetos cr√≠ticos"""
        critical_projects = data.get('critical_projects_details', [])
        
        if not critical_projects:
            # Slide informando que n√£o h√° projetos cr√≠ticos
            slide_layout = prs.slide_layouts[1]
            slide = prs.slides.add_slide(slide_layout)
            
            title = slide.shapes.title
            content = slide.placeholders[1]
            
            title.text = "‚úÖ Status dos Projetos"
            
            text_frame = content.text_frame
            text_frame.clear()
            
            p = text_frame.paragraphs[0]
            p.text = "üéâ Nenhum projeto com campos cr√≠ticos encontrado!"
            p.font.size = Pt(24)
            p.font.color.rgb = RGBColor(40, 167, 69)  # Verde
            
            p = text_frame.add_paragraph()
            p.text = "Todos os projetos est√£o em conformidade ou precisam apenas de ajustes menores."
            p.font.size = Pt(18)
            
            return
            
        # Adicionar slide de introdu√ß√£o aos projetos cr√≠ticos
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = "üö® Projetos que Precisam Aten√ß√£o"
        
        text_frame = content.text_frame
        text_frame.clear()
        
        p = text_frame.paragraphs[0]
        p.text = f"Encontrados {len(critical_projects)} projetos com campos cr√≠ticos:"
        p.font.size = Pt(20)
        p.font.bold = True
        
        for i, project in enumerate(critical_projects[:5]):  # Limitar a 5 projetos
            p = text_frame.add_paragraph()
            p.text = f"{i+1}. {project['name']} ({project['type']})"
            p.font.size = Pt(16)
            
            if project['critical_fields'] > 0:
                p.text += f" - {project['critical_fields']} campos cr√≠ticos"
                p.font.color.rgb = RGBColor(220, 53, 69)
                
        # Adicionar slides individuais para projetos cr√≠ticos
        for project in critical_projects[:3]:  # Limitar a 3 slides detalhados
            self._add_project_detail_slide(prs, project)
            
    def _add_project_detail_slide(self, prs: Presentation, project: Dict[str, Any]):
        """Adiciona slide detalhado de um projeto"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = f"üìÅ {project['name']}"
        
        text_frame = content.text_frame
        text_frame.clear()
        
        p = text_frame.paragraphs[0]
        p.text = f"Tipo: {project['type']}"
        p.font.size = Pt(18)
        p.font.bold = True
        
        p = text_frame.add_paragraph()
        p.text = f"Total de Campos: {project['total_fields']}"
        p.font.size = Pt(16)
        
        p = text_frame.add_paragraph()
        p.text = f"Campos Cr√≠ticos: {project['critical_fields']}"
        p.font.size = Pt(16)
        p.font.color.rgb = RGBColor(220, 53, 69)
        
        p = text_frame.add_paragraph()
        p.text = f"Campos de Alto Impacto: {project['high_impact_fields']}"
        p.font.size = Pt(16)
        p.font.color.rgb = RGBColor(255, 193, 7)
        
        # Adicionar detalhes dos campos cr√≠ticos
        if project.get('critical_details'):
            p = text_frame.add_paragraph()
            p.text = "Campos Cr√≠ticos Encontrados:"
            p.font.size = Pt(14)
            p.font.bold = True
            
            for detail in project['critical_details'][:3]:  # Limitar a 3 campos
                p = text_frame.add_paragraph()
                p.text = f"‚Ä¢ {detail['field_name']} - {detail['action_needed']}"
                p.font.size = Pt(12)
                p.level = 1
                
    def _add_next_steps_slide(self, prs: Presentation):
        """Adiciona slide de pr√≥ximos passos"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = "üöÄ Pr√≥ximos Passos"
        
        text_frame = content.text_frame
        text_frame.clear()
        
        steps = [
            "1. Priorizar projetos com campos cr√≠ticos",
            "2. Revisar campos de alto impacto",
            "3. Planejar migra√ß√£o de dados",
            "4. Atualizar valida√ß√µes frontend",
            "5. Implementar testes de regress√£o",
            "6. Treinar equipe sobre novo formato"
        ]
        
        for step in steps:
            p = text_frame.paragraphs[0] if len(text_frame.paragraphs) == 1 else text_frame.add_paragraph()
            p.text = step
            p.font.size = Pt(18)
            
    def _markdown_to_html(self, markdown_content: str) -> str:
        """Converte Markdown para HTML"""
        # Convers√£o simples de Markdown para HTML
        html = markdown_content
        
        # T√≠tulos
        html = html.replace('# ', '<h1>').replace('\n# ', '</h1>\n<h1>')
        html = html.replace('## ', '<h2>').replace('\n## ', '</h2>\n<h2>')
        html = html.replace('### ', '<h3>').replace('\n### ', '</h3>\n<h3>')
        
        # Listas
        html = html.replace('- ', '<li>').replace('\n- ', '</li>\n<li>')
        
        # Negrito
        html = html.replace('**', '<strong>').replace('**', '</strong>')
        
        # Quebras de linha
        html = html.replace('\n\n', '</p>\n<p>')
        
        # Estrutura HTML completa
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Relat√≥rio CNPJ Alfanum√©rico</title>
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    margin: 40px; 
                    font-size: 12px;
                    line-height: 1.4;
                }}
                h1 {{ 
                    color: #003366; 
                    font-size: 24px;
                    margin-top: 20px;
                    margin-bottom: 10px;
                }}
                h2 {{ 
                    color: #0066cc; 
                    font-size: 20px;
                    margin-top: 15px;
                    margin-bottom: 8px;
                }}
                h3 {{ 
                    color: #0099ff; 
                    font-size: 16px;
                    margin-top: 12px;
                    margin-bottom: 6px;
                }}
                strong {{ 
                    color: #dc3545; 
                    font-weight: bold;
                }}
                li {{ 
                    margin: 3px 0; 
                    font-size: 11px;
                }}
                p {{
                    margin: 8px 0;
                    font-size: 11px;
                }}
                table {{
                    border-collapse: collapse;
                    width: 100%;
                    margin: 10px 0;
                    font-size: 10px;
                }}
                th, td {{
                    border: 1px solid #ddd;
                    padding: 4px;
                    text-align: left;
                }}
                th {{
                    background-color: #f2f2f2;
                    font-weight: bold;
                }}
            </style>
        </head>
        <body>
            <p>{html}</p>
        </body>
        </html>
        """
        
        return html
